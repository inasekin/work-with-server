[{"/Users/nasekinid/Desktop/react/react-apps/srar-db/src/components/random-planet/random-planet.js":"1","/Users/nasekinid/Desktop/react/react-apps/srar-db/src/api/swapi-service.js":"2","/Users/nasekinid/Desktop/react/react-apps/srar-db/src/components/app/app.js":"3","/Users/nasekinid/Desktop/react/react-apps/srar-db/src/components/header/header.js":"4","/Users/nasekinid/Desktop/react/react-apps/srar-db/src/components/loader/loader.js":"5"},{"size":1789,"mtime":1610233633504,"results":"6","hashOfConfig":"7"},{"size":2914,"mtime":1610231820123,"results":"8","hashOfConfig":"7"},{"size":591,"mtime":1610228948396,"results":"9","hashOfConfig":"7"},{"size":533,"mtime":1610231883874,"results":"10","hashOfConfig":"7"},{"size":600,"mtime":1610232700659,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"zc6d9b",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/nasekinid/Desktop/react/react-apps/srar-db/src/components/random-planet/random-planet.js",["23"],"import React, { Component } from 'react';\n\nimport Loader from '../loader';\nimport SwapiService from '../../api/swapi-service';\n\nimport './random-planet.css';\n\nexport default class RandomPlanet extends Component {\n\n  swapiService = new SwapiService();\n\n  state = {\n    planet: {},\n    loading: true\n  };\n\n  constructor() {\n    super();\n    this.updatePlanet();\n  }\n\n  onPlanetLoaded = (planet) => {\n    this.setState({\n      planet,\n      loading: false\n    });\n  };\n\n  updatePlanet() {\n    const id = Math.floor(Math.random()*25) + 2;\n    this.swapiService\n      .getPlanet(id)\n      .then(this.onPlanetLoaded);\n  }\n\n  render() {\n    const { planet, loading } = this.state;\n    const spinner = loading ? <Loader /> : null;\n    const content = !loading ? <PlanetView planet={planet}/> : null;\n\n    return (\n      <div className=\"random-planet jumbotron rounded\">\n        {spinner}\n        {content}\n      </div>\n    );\n  }\n}\n\nconst PlanetView = ({ planet }) => {\n\n  const { id, name, population,\n    rotationPeriod, diameter } = planet;\n\n  return (\n    <React.Fragment>\n      <img className=\"planet-image\"\n           src={`https://starwars-visualguide.com/assets/img/planets/${id}.jpg`} />\n      <div>\n        <h4>{name}</h4>\n        <ul className=\"list-group list-group-flush\">\n          <li className=\"list-group-item\">\n            <span className=\"term\">Population</span>\n            <span>{population}</span>\n          </li>\n          <li className=\"list-group-item\">\n            <span className=\"term\">Rotation Period</span>\n            <span>{rotationPeriod}</span>\n          </li>\n          <li className=\"list-group-item\">\n            <span className=\"term\">Diameter</span>\n            <span>{diameter}</span>\n          </li>\n        </ul>\n      </div>\n    </React.Fragment>\n  );\n};","/Users/nasekinid/Desktop/react/react-apps/srar-db/src/api/swapi-service.js",["24"],"/Users/nasekinid/Desktop/react/react-apps/srar-db/src/components/app/app.js",[],"/Users/nasekinid/Desktop/react/react-apps/srar-db/src/components/header/header.js",["25","26","27","28"],"/Users/nasekinid/Desktop/react/react-apps/srar-db/src/components/loader/loader.js",[],{"ruleId":"29","severity":1,"message":"30","line":57,"column":7,"nodeType":"31","endLine":58,"endColumn":84},{"ruleId":"32","severity":1,"message":"33","line":9,"column":50,"nodeType":"34","messageId":"35","endLine":9,"endColumn":51},{"ruleId":"36","severity":1,"message":"37","line":9,"column":9,"nodeType":"31","endLine":9,"endColumn":21},{"ruleId":"36","severity":1,"message":"37","line":15,"column":11,"nodeType":"31","endLine":15,"endColumn":46},{"ruleId":"36","severity":1,"message":"37","line":18,"column":11,"nodeType":"31","endLine":18,"endColumn":46},{"ruleId":"36","severity":1,"message":"37","line":21,"column":11,"nodeType":"31","endLine":21,"endColumn":46},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md"]